<?php

/**
 * @file
 * Contains the code to generate the custom drush commands.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Utility\UpdateException;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Migrate old settings to node template whisperer field.
 */
function rp_site_update_8001(&$sandbox) {
  $state = \Drupal::state();

  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::service('entity_type.manager');

  try {
    $node_storage = $entity_type_manager->getStorage('node');
    $tw_storage = $entity_type_manager->getStorage('template_whisperer_suggestion');
  }
  catch (InvalidPluginDefinitionException $e) {
    throw new UpdateException($e->getMessage());
  }

  /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity $tw */
  $tw = $tw_storage->load('collection_actualites');

  if (!isset($tw)) {
    throw new UpdateException('Config is not imported');
  }

  $config_names = [
    'rp_site.settings.collection.news',
    'rp_site.settings.collection.documents',
    'rp_site.settings.collection.faqs',
    'rp_site.settings.collection.buildings',
    'rp_site.settings.collection.management_contracts',
    'rp_site.settings.collection.partnerships',
    'rp_site.settings.single.contact',
    'rp_site.settings.collection.mortgage_calculator',
    'rp_site.settings.collection.mortgage_tablerates',
    'rp_site.settings.collection.constructionloan_tablerates',
    'rp_site.settings.collection.localauthoritiesloan_tablerates',
  ];

  foreach ($config_names as $config_name) {
    $settings = $state->get($config_name);

    /** @var \Drupal\node\Entity\Node $node */
    $node = $node_storage->load($settings['nid']);
    if (isset($node)) {
      $node->set('field_template_whisperer', $settings['theme']);
      try {
        $node->save();
      }
      catch (EntityStorageException $e) {
        throw new UpdateException($e->getMessage());
      }
    }

    $state->delete($config_name);
  }
}

/**
 * Copy old metatags field to new one meta_tags for yoast seo.
 */
function rp_site_update_8002(&$sandbox) {
  /** @var \Drupal\Core\Extension\ModuleHandler $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  // Ensure that Real-Time SEO for Drupal module is enable.
  if (!$moduleHandler->moduleExists('yoast_seo')) {
    throw new UpdateException('Module Real Time SEO (yoast_seo) isn\'t install');
  }

  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::entityTypeManager();

  // Get all content type where there's the field_metatag.
  $field = FieldStorageConfig::loadByName('node', 'field_metatags');
  $node_bundles = $field->getBundles();

  /** @var \Drupal\Core\Entity\EntityStorageInterface $node_storage */
  $node_storage = $entity_type_manager->getStorage('node');

  // Initialise $sanbox for the first execution.
  if (!isset($sandbox['max'])) {
    $sandbox['current'] = 0;
    $sandbox['count'] = 0;
    $sandbox['max'] = $node_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('type', $node_bundles, 'in')
      ->count()->execute();
  }

  // Get the 50 next nodes.
  $nids = $node_storage->getQuery()
    ->accessCheck(FALSE)
    ->range(0, 50)
    ->condition('nid', $sandbox['current'], '>')
    ->condition('type', $node_bundles, 'in')
    ->sort('nid')
    ->execute();

  $nodes = $node_storage->loadMultiple($nids);

  /** @var \Drupal\node\NodeInterface $node */
  foreach ($nodes as $node) {
    if ($node->hasField('field_metatags')) {
      $node->field_meta_tags = $node->field_metatags;
      $node->setNewRevision();
      $node->save();
    }

    $sandbox['current'] = $node->id();
    $sandbox['count']++;
  }

  // Get if all batch has been passed.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['count'] / $sandbox['max'];
}
