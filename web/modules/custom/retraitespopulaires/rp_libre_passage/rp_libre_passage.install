<?php

/**
 * @file
 * Contains the code to generate the custom drush commands.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Utility\UpdateException;

/**
 * Migrate old settings to node template whisperer field.
 */
function rp_libre_passage_update_8001(&$sandbox) {
  $state = \Drupal::state();

  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
  $entity_type_manager = \Drupal::service('entity_type.manager');

  try {
    $node_storage = $entity_type_manager->getStorage('node');
    $tw_storage = $entity_type_manager->getStorage('template_whisperer_suggestion');
  }
  catch (InvalidPluginDefinitionException $e) {
    throw new UpdateException($e->getMessage());
  }

  /** @var \Drupal\template_whisperer\Entity\TemplateWhispererSuggestionEntity $tw */
  $tw = $tw_storage->load('collection_actualites');

  if (!isset($tw)) {
    throw new UpdateException('Config is not imported');
  }

  $config_names = [
    'rp_libre_passage.settings.page.calculator',
  ];

  foreach ($config_names as $config_name) {
    $settings = $state->get($config_name);

    /** @var \Drupal\node\Entity\Node $node */
    $node = $node_storage->load($settings['nid']);
    if (isset($node)) {
      $node->set('field_template_whisperer', $settings['theme']);
      try {
        $node->save();
      }
      catch (EntityStorageException $e) {
        throw new UpdateException($e->getMessage());
      }
    }

    $state->delete($config_name);
  }
}
